---
const cards = [
  {
    imgsrc: "",
    text: "At Apocalypse, don’t worry about being realistic. Build the projects that’d never make sense IRL, but would be perfect for tackling the zombies—from post-apocalyptic food delivery to zombie-sized mousetraps.",
    position: "",
    card: true,
  },
  {
    imgsrc: "/test.jpeg",
    position: "",
    card: false,
  },
  {
    imgsrc: "/placeholder.jpg",
    position: "",
    card: false,
  },
  {
    imgsrc: "",
    text: "Another card content asdf asdf asdfas gasef sdfasgasefasdhere...",
    position: "",
    card: true,
  },
  {
    imgsrc: "",
    text: "Another card content asdf asdf asdfas gasef sdfasgasefasdhere...",
    position: "",
    card: true,
  },
  {
    imgsrc: "",
    text: "Another card content asdf asdf asdfas gasef sdfasgasefasdhere...",
    position: "",
    card: true,
  },
  {
    imgsrc: "",
    text: "Another card content asdf asdf asdfas gasef sdfasgasefasdhere...",
    position: "",
    card: true,
  },
  {
    imgsrc: "",
    text: "Another card content asdf asdf asdfas gasef sdfasgasefasdhere...",
    position: "",
    card: true,
  },
];

// Pre-render HTML markup for cards
---

<section class="relative bg-dino-dark-teal h-svh pt-10 hidden sm:block">
  <div class="relative h-full max-w-6xl mx-auto">
    <!-- Desktop view -->
    <div id="cards-container" class="relative h-full">
      {
        cards.map((card, index) => (
          <div
            id={`card-${index}`}
            class="absolute text-center bg-white border-black rounded-md border-3 w-fit"
          >
            {card.card ? (
              <div class="p-3 text-sm text-black max-w-xs">
                <h1 class="p-3 border-2 border-dino-dark-teal">{card.text}</h1>
              </div>
            ) : (
              <img
                src={card.imgsrc}
                alt=""
                class="w-60 rounded-md border-solid border-white border-4"
              />
            )}
          </div>
        ))
      }
    </div>
</section>

<section class="bg-dino-dark-teal pt-10 pb-5 block sm:hidden">
  <div class="relative max-w-6xl mx-auto">
    <!-- Mobile view -->
    <div class=" px-5">
      {
        cards.map((card, index) => (
          <div key={index} class="flex flex-col items-center text-center bg-white border-black rounded-md border-3 mb-5">
            {card.card ? (
              <div class="p-3 text-sm text-black">
                <h1 class="p-3 border-2 border-dino-dark-teal">{card.text}</h1>
              </div>
            ) : (
              <img
                src={card.imgsrc}
                alt=""
                class="rounded-md border-solid border-white border-4"
              />
            )}
          </div>
        ))
      }
    </div>
  </div>
</section>



<script>
  function placeCards() {
    const cardsContainer = document.getElementById("cards-container");
    const cardElements = document.querySelectorAll("[id^=card-]");
    const containerWidth = cardsContainer.offsetWidth;
    const containerHeight = cardsContainer.offsetHeight;

    const cardPadding = 20; // Padding to avoid overlap
    const placedCards = [];

    function generateRandomPosition(cardWidth, cardHeight) {
      let x, y, overlap;
      let attempts = 0;

      do {
        x = Math.floor(
          Math.random() * (containerWidth - cardWidth - cardPadding)
        );
        y = Math.floor(
          Math.random() * (containerHeight - cardHeight - cardPadding)
        );
        overlap = false;

        // Check for overlap with existing cards
        for (const placedCard of placedCards) {
          if (
            x < placedCard.x + placedCard.width + cardPadding &&
            x + cardWidth + cardPadding > placedCard.x &&
            y < placedCard.y + placedCard.height + cardPadding &&
            y + cardHeight + cardPadding > placedCard.y
          ) {
            overlap = true;
            break;
          }
        }

        attempts++;
        if (attempts > 100) {
          console.error("Couldn't find valid position after 100 attempts");
          return { x: 0, y: 0 }; // Return a default position if not found
        }
      } while (overlap);

      placedCards.push({ x, y, width: cardWidth, height: cardHeight });
      return { x, y };
    }

    // Place cards after ensuring they are rendered
    cardElements.forEach((cardElement) => {
      // Force browser to calculate card dimensions
      const cardRect = cardElement.getBoundingClientRect();
      const cardWidth = cardRect.width;
      const cardHeight = cardRect.height;

      const { x, y } = generateRandomPosition(cardWidth, cardHeight);
      cardElement.style.left = `${x}px`;
      cardElement.style.top = `${y}px`;
    });
  }

  window.onload = placeCards;
  window.onresize = placeCards;
</script>
